#pragma kernel CSMain

RWTexture2D<float4> Result;

Texture2D<float4> _MainTex;
SamplerState sampler_MainTex;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _BGColorA = float4(0.2, 0.011, 0.078, 1);
float4 _BGColorB = float4(0.06, 0.02, 0.11, 1);

float _FractalPower = 2;

float3 _DiffuseColor = float3(0.7, 0.2, 0.2);
float3 _AmbientColor = float3(0.2, 0.2, 0.2);
float3 _SpecColor = float3(1.0, 1.0, 1.0);
float3 _BloomColor = float3(1.0, 1.0, 1.0);
float _Shininess = 10.0;

float3 _LightPos = float3(2, 2, 2);
float3 _LightIntensity = float3(4, 4, 4);
float3 _LightDirection = float3(50, -30, 4);

float _ObjectCount;
float3 _ObjectPositions[15];

static const float objectScale = 0.1;
static const float epsilon = 0.001f;
static const float maxDst = 200;
static const float minDst = 1;
static const int maxStepCount = 200;

//RAY MARCHING FUNCTIONS
struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

//SPHERE SDF
float sphereSDF(float3 samplePoint,float3 position)
{
    samplePoint -= position;
    return length(samplePoint) - objectScale;
}

//CUBE SDF-Taken from Sebastian Lauge
float CubeSDF(float3 samplePoint, float3 position)
{
    float3 o = abs(samplePoint - position) - objectScale;
    float ud = length(max(o, 0));
    float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
    return ud + n;
}

//MANDELBULB DISTANCE ESTIMATOR
float mandelBulbDE(float3 samplePoint)
{
    float3 z = samplePoint/ 2;
    float dr = 1.0;
    float r = 0.0;
    float power = _FractalPower;
    
    for (int i = 0; i < 15; i++)
    {
        r = length(z);
        if (r > 2)
            break;

        float theta = asin(z.z / r);
        float phi = atan2(z.y, z.x);
        float zr = pow(r, power);
        
        theta *= power;
        phi *= power;
        z = zr * float3(cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta));
        dr = pow(r, power - 1) * dr * power + 1.0;

        // Add the new position to the current position
        z += samplePoint;
    }
    return 0.5 * log(r) * r / dr;
}

// polynomial smooth min (k = 0.1);
// from https://www.iquilezles.org/www/articles/smin/smin.htm
float Blend(float a, float b, float k)
{
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    float blendDst = lerp(b, a, h) - k * h * (1.0 - h);
    return float(blendDst);
}

float SceneDist(float3 samplePoint)
{
    float blendStrength = 0.32;
    float minimum = maxDst;
    for (int i = 0; i < _ObjectCount; i++)
    {
        if (i % 2 == 0)
        {
            minimum = Blend(sphereSDF(samplePoint, _ObjectPositions[i]), minimum, blendStrength);
            continue;
        }
        minimum = Blend(CubeSDF(samplePoint, _ObjectPositions[i]), minimum, blendStrength);
    }
    minimum = Blend(mandelBulbDE(samplePoint), minimum, blendStrength);
    return minimum;
}


//SCENE DISTANCE ESTIMATOR
float2 shortestDistanceToSurface(Ray ray)
{
    float depth = minDst;
    float iter = 0;
    for (int i = 0; i < maxStepCount; i++)
    {
        float dist = SceneDist(ray.origin + depth * ray.direction);
        if (dist < epsilon)
        {
            return float2(depth, iter);
        }
        depth += dist;
        if (depth > maxDst)
        {
            return float2(maxDst, iter);
        }
        iter++;

    }
    return float2(maxDst, iter);
}

//NORMAL ESTIMATION
float3 EstimateNormal(float3 p)
{
    float x = SceneDist(float3(p.x + epsilon, p.y, p.z)) - SceneDist(float3(p.x - epsilon, p.y, p.z));
    float y = SceneDist(float3(p.x, p.y + epsilon, p.z)) - SceneDist(float3(p.x, p.y - epsilon, p.z));
    float z = SceneDist(float3(p.x, p.y, p.z + epsilon)) - SceneDist(float3(p.x, p.y, p.z - epsilon));
    return normalize(float3(x, y, z));
}

//LIGHTING MODEL
float3 phongContribForLight(float3 diffuse, float3 spec, float alpha,
                            float3 p, float3 origin,
                            float3 lightPos, float3 lightIntensity)
{
    float3 N = EstimateNormal(p);
    float3 L = normalize(lightPos - p);
    float3 V = normalize(origin - p);
    float3 R = normalize(reflect(-L, N));
    
    float dotLN = dot(L, N);
    float dotRV = dot(R, V);
    
    if (dotLN < 0.0){
        return float3(0, 0, 0);
    }
    if (dotRV < 0.0){
        return lightIntensity * (diffuse * dotLN);
    }
    return lightIntensity * (diffuse * dotLN + spec * pow(abs(dotRV), alpha));
}

float3 phongIllumination(float3 diffuse, float3 ambient, float3 spec,
                         float alpha, float3 p, float3 origin)
{
    float3 ambientLigth = 0.5 * float3(1.0, 1.0, 1.0);
    float3 color = ambient;
    color += phongContribForLight(diffuse, spec, alpha,
                                    p, origin, 
                                    _LightPos, _LightIntensity);
    return color;
}




[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    Ray ray = CreateCameraRay(uv);
    
    float4 result = lerp(_BGColorA, _BGColorB, uv.y);
    
    float2 distRes = shortestDistanceToSurface(ray);
    if (distRes.x > maxDst - epsilon)
    {
        //no hit
        float bloom = distRes.y / 5000;
        Result[id.xy] = lerp(result, float4(_BloomColor, 1) * bloom, distRes.y / 90);
        return;
    }
        
    float3 hitpoint = ray.origin + distRes.x * ray.direction;
    float3 phongColor = phongIllumination(_DiffuseColor, _AmbientColor,
                                          _SpecColor, _Shininess,
                                          hitpoint, ray.origin);
    Result[id.xy] = float4(phongColor, 1);
}
